# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
PURELIB

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is generated by PyCharm.
.idea/

# VS Code
.vscode/

# Benchmark-specific ignores
*.log
.DS_Store
Thumbs.db

# Temporary files from benchmark runs
tmp/
temp/
pr_comment.md

# Large data files (use Git LFS if needed)
*.parquet
*.hdf5
*.npz

# ==========================================
# PREVENT LOCAL BENCHMARK RESULTS UPLOAD
# ==========================================
# Only allow CI-generated results by blocking local results
# Use CI_COMMIT_TAG to differentiate CI vs local runs

# Block ALL local benchmark results
data/results/*_benchmark_*.json
data/results/latest_*.json

# IMPORTANT: Baseline files should ONLY be created in CI
# to ensure consistent environment across comparisons
# CI will use 'git add -f' to force-add these files
data/results/datason_baseline.json
data/results/latest.json

# Block local HTML reports  
docs/results/*_report_*.html

# Generated documentation index (updated daily by CI)
docs/results/index.html

# Temporary benchmark files
benchmark_*.json
*_results.json
performance_*.json

# Only allow CI-tagged results (these will be allowed via force-add in CI)
# CI will commit files with pattern: ci_*_*.json
!data/results/ci_*_*.json
!docs/results/ci_*_*.html

# Allow historical tracking files
!data/results/history.json
!data/results/trends.json

# ==========================================
# PHASE 2: SYNTHETIC DATA EXCLUSIONS
# ==========================================
# Generated data files - exclude large generated datasets
data/synthetic/*_data.json
data/synthetic/generation_summary.json

# Keep the data generator script but not generated data
!data/synthetic/data_generator.py 