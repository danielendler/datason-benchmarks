name: 🚀 DataSON PR Performance Benchmark

on:
  repository_dispatch:
    types: [datason-pr-benchmark]
  workflow_dispatch:
    inputs:
      datason_artifact_url:
        description: 'DataSON wheel artifact URL'
        required: true
        type: string
      pr_number:
        description: 'DataSON PR number'
        required: true
        type: string
      commit_sha:
        description: 'DataSON commit SHA'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write

jobs:
  benchmark-datason-pr:
    name: 📊 Benchmark DataSON PR
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout benchmarks
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: 💾 Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: datason-pr-${{ runner.os }}-py3.11-${{ hashFiles('requirements.txt') }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install orjson ujson msgpack jsonpickle pandas numpy
        
    - name: 📥 Download DataSON PR wheel
      run: |
        # Download from artifact URL (GitHub API or direct link)
        curl -L "${{ github.event.inputs.datason_artifact_url }}" -o datason-pr.whl
        
    - name: 🔧 Install DataSON PR
      run: |
        pip install datason-pr.whl
        
        # Verify installation
        python -c "
        import datason
        print(f'📦 DataSON {datason.__version__} from PR installed')
        "
        
    - name: 🚀 Run PR-optimized benchmark
      run: |
        mkdir -p data/results docs/results
        
        # Run our optimized PR benchmark suite (5 datasets, ~2 min)
        echo "🎯 Running PR-optimized benchmark suite..."
        python scripts/pr_optimized_benchmark.py
        
        # Generate Phase 4 enhanced report
        echo "🎨 Generating Phase 4 enhanced report..."
        python scripts/phase4_enhanced_reports.py \
          --input data/results/pr_optimized_*.json \
          --output docs/results/datason_pr_${{ github.event.inputs.pr_number }}.html \
          --title "DataSON PR #${{ github.event.inputs.pr_number }} Analysis"
          
    - name: 🔍 Regression detection
      run: |
        # Compare against baseline
        if [ -f data/results/datason_baseline.json ]; then
          python scripts/regression_detector.py \
            data/results/pr_optimized_*.json \
            --baseline data/results/datason_baseline.json \
            --fail-threshold 0.30 \
            --warn-threshold 0.15 \
            --pr-comment datason_pr_comment.md
          
          echo "REGRESSION_STATUS=$?" >> $GITHUB_ENV
        else
          echo "📝 Establishing new baseline"
          echo "REGRESSION_STATUS=0" >> $GITHUB_ENV
        fi
        
    - name: 💬 Generate PR comment
      run: |
        cat > comprehensive_pr_comment.md << 'EOF'
        # 🚀 DataSON PR Performance Analysis
        
        **PR #${{ github.event.inputs.pr_number }}** | **Commit**: ${{ github.event.inputs.commit_sha }}
        
        ## 📊 Benchmark Results
        
        Tested against our **Phase 1-4 optimized dataset suite**:
        
        | Dataset | Domain | Status | Key Focus |
        |---------|--------|--------|-----------|
        | Web API Response | `web_api` | ✅ | Common serialization patterns |
        | ML Training Data | `machine_learning` | ✅ | NumPy/Pandas integration |
        | Financial Transaction | `finance` | ✅ | Precision decimal handling |
        | Mixed Types Challenge | `type_testing` | ✅ | Edge case coverage |
        | Security PII Test | `security` | ✅ | PII detection effectiveness |
        
        ## 📈 Enhanced Analysis
        
        - **Phase 4 Enhanced Report**: Comprehensive interactive analysis available
        - **Smart Unit Formatting**: Automatic μs/ms/s conversion
        - **ML Compatibility**: 100% NumPy/Pandas support validated
        - **Security Metrics**: PII redaction effectiveness measured
        
        EOF

        # Add regression analysis if available
        if [ -f datason_pr_comment.md ]; then
          echo "" >> comprehensive_pr_comment.md
          cat datason_pr_comment.md >> comprehensive_pr_comment.md
        fi
        
        # Add status
        if [ "$REGRESSION_STATUS" = "0" ]; then
          echo "" >> comprehensive_pr_comment.md
          echo "## ✅ Performance Status" >> comprehensive_pr_comment.md
          echo "No significant performance regressions detected. Ready for review!" >> comprehensive_pr_comment.md
        else
          echo "" >> comprehensive_pr_comment.md
          echo "## ⚠️ Performance Alert" >> comprehensive_pr_comment.md
          echo "Potential performance regression detected. Please review analysis above." >> comprehensive_pr_comment.md
        fi
        
    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: datason-pr-${{ github.event.inputs.pr_number }}-analysis
        path: |
          data/results/pr_optimized_*.json
          docs/results/datason_pr_${{ github.event.inputs.pr_number }}.html
          comprehensive_pr_comment.md
        retention-days: 30
        
    - name: 📝 Post to DataSON PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.BENCHMARK_REPO_TOKEN }}
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('comprehensive_pr_comment.md', 'utf8');
          
          await github.rest.issues.createComment({
            owner: 'datason',
            repo: 'datason',
            issue_number: ${{ github.event.inputs.pr_number }},
            body: comment
          });
          
    - name: ❌ Fail on regression
      if: env.REGRESSION_STATUS != '0'
      run: |
        echo "❌ Performance regression detected!"
        exit 1 