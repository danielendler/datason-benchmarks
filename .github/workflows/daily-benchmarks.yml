name: 📊 Daily Benchmarks

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      benchmark_type:
        description: 'Type of benchmark to run'
        required: false
        default: 'complete'
        type: choice
        options:
          - 'quick'
          - 'competitive'
          - 'configurations'
          - 'versioning'
          - 'complete'
          - 'phase2'

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PYTHONUNBUFFERED: 1
  CI: true
  GITHUB_ACTIONS: true

jobs:
  benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: 💾 Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: benchmark-deps-${{ runner.os }}-py3.11-${{ hashFiles('requirements.txt') }}-${{ github.run_id }}
        restore-keys: |
          benchmark-deps-${{ runner.os }}-py3.11-${{ hashFiles('requirements.txt') }}-
          benchmark-deps-${{ runner.os }}-py3.11-

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Verify all competitive libraries are available
        python -c "
        import sys
        try:
            import datason, orjson, ujson, json, pickle, jsonpickle, msgpack
            print('✅ All competitive libraries installed successfully')
        except ImportError as e:
            print(f'❌ Missing library: {e}')
            sys.exit(1)
        "

    - name: 📊 Run CI benchmark suite
      run: |
        BENCHMARK_TYPE="${{ github.event.inputs.benchmark_type || 'complete' }}"
        echo "🚀 Running CI benchmark type: $BENCHMARK_TYPE"
        
        # Ensure results directory exists
        mkdir -p data/results docs/results
        
        case $BENCHMARK_TYPE in
          "quick")
            python scripts/run_benchmarks.py --quick --generate-report
            ;;
          "competitive")
            python scripts/run_benchmarks.py --competitive --generate-report
            ;;
          "configurations")
            python scripts/run_benchmarks.py --configurations --generate-report
            ;;
          "versioning")
            python scripts/run_benchmarks.py --versioning --generate-report
            ;;
          "complete")
            python scripts/run_benchmarks.py --complete --generate-report
            ;;
          "phase2")
            python scripts/run_benchmarks.py --phase2 --generate-report
            ;;
          "all")
            # Backward compatibility - map to complete
            python scripts/run_benchmarks.py --complete --generate-report
            ;;
          *)
            echo "Unknown benchmark type: $BENCHMARK_TYPE, running complete"
            python scripts/run_benchmarks.py --complete --generate-report
            ;;
        esac
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_RUN_ID: ${{ github.run_id }}

    - name: 🏷️ Tag results with CI metadata
      run: |
        # Create CI-tagged copies of all generated results
        timestamp=$(date -u '+%Y%m%d_%H%M%S')
        run_id="${{ github.run_id }}"
        
        cd data/results
        
        # Tag all latest_*.json files with CI prefix
        for file in latest_*.json; do
          if [ -f "$file" ]; then
            suite_type=$(echo "$file" | sed 's/latest_\(.*\)\.json/\1/')
            ci_filename="ci_${timestamp}_${run_id}_${suite_type}.json"
            cp "$file" "$ci_filename"
            echo "✅ Created CI result: $ci_filename"
          fi
        done

    - name: 🎨 Generate Phase 4 Enhanced Reports
      run: |
        echo "🚀 Generating Phase 4 Enhanced Reports with comprehensive tables and visualizations..."
        
        # Generate Phase 4 enhanced reports for all available result files
        cd data/results
        for result_file in latest_*.json; do
          if [ -f "$result_file" ]; then
            echo "📊 Processing $result_file with Phase 4 enhancements..."
            python ../../scripts/phase4_enhanced_reports.py "$result_file" || echo "⚠️ Phase 4 report generation failed for $result_file"
          fi
        done
        
        # Also generate Phase 4 reports for any CI-tagged files from this run
        for result_file in ci_*_${{ github.run_id }}_*.json; do
          if [ -f "$result_file" ]; then
            echo "📊 Processing CI result $result_file with Phase 4 enhancements..."
            python ../../scripts/phase4_enhanced_reports.py "$result_file" || echo "⚠️ Phase 4 report generation failed for $result_file"
          fi
        done
        
        cd ../..
        echo "✅ Phase 4 enhanced report generation completed"

    - name: 📊 Generate GitHub Pages index
      run: |
        python scripts/generate_github_pages.py
        
        # Also update general docs index for navigation
        python scripts/update_docs_index.py
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}

    - name: 🌐 Commit CI results to repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Force add CI-tagged results (override gitignore) - with safety checks
        find data/results -name "ci_*_*.json" -exec git add -f {} \; 2>/dev/null || echo "ℹ️ No CI JSON results to commit"
        find docs/results -name "ci_*_*.html" -exec git add -f {} \; 2>/dev/null || echo "ℹ️ No CI HTML results to commit"
        find docs/results -name "phase4_comprehensive_*.html" -exec git add -f {} \; 2>/dev/null || echo "ℹ️ No Phase 4 reports to commit"
        git add docs/results/index.html 2>/dev/null || echo "ℹ️ No index.html to commit"
        git add docs/index.md 2>/dev/null || echo "ℹ️ No docs index.md to commit"
        
        # Commit if there are changes
        if ! git diff --staged --quiet; then
          commit_msg="📊 CI Benchmark Results - $(date -u '+%Y-%m-%d %H:%M UTC')

        Suite: ${{ github.event.inputs.benchmark_type || 'complete' }}
        Run ID: ${{ github.run_id }}
        SHA: ${{ github.sha }}
        
        ✨ Includes Phase 4 Enhanced Reports with:
        - 📊 Comprehensive performance tables
        - 🎯 Smart unit formatting (μs/ms/s)
        - 📈 Interactive visualizations
        - 🔍 Detailed ML/Security analysis"
          
          git commit -m "$commit_msg"
          git push
          echo "✅ CI results committed to repository"
        else
          echo "ℹ️ No changes to commit"
        fi

    - name: 📤 Upload artifacts for analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: daily-benchmark-results-${{ github.run_id }}
        path: |
          data/results/ci_*_*.json
          docs/results/ci_*_*.html
          docs/results/phase4_comprehensive_*.html
          docs/results/index.html
        retention-days: 90

    - name: ✅ Benchmark complete
      run: |
        echo "🎉 Daily benchmark suite completed successfully!"
        echo "📊 Results available in repository and GitHub Pages"
        echo "🔗 https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" 