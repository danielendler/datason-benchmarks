name: profiling

on:
  pull_request:
  workflow_dispatch:

jobs:
  profiling:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        with_rust: [off, on]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Stage timing profile
        env:
          WITH_RUST: ${{ matrix.with_rust }}
        run: |
          python scripts/profile_stages.py --with-rust ${WITH_RUST}

      - name: Flamegraph profiling
        run: |
          bash scripts/profile_flame_pyspy.sh

      - name: Upload profiling artifacts
        uses: actions/upload-artifact@v4
        with:
          name: profiling-${{ matrix.with_rust }}
          path: |
            results/stage_times_*.json
            results/stage_times_*.csv
            results/flame_*.svg
            results/scalene_report.txt

      - name: Comment summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          RUST_MODE: ${{ matrix.with_rust }}
        with:
          script: |
            const fs = require('fs');
            const mode = process.env.RUST_MODE;
            const file = `results/stage_times_${mode}.json`;
            if (!fs.existsSync(file)) {
              core.warning(`Missing file ${file}`);
              return;
            }
            const data = JSON.parse(fs.readFileSync(file, 'utf8'));
            const top = Object.entries(data)
              .sort((a, b) => b[1].median_ms - a[1].median_ms)
              .slice(0, 5);
            let body = `### Profiling (${mode})\n\n`;
            body += '| Stage | median ms | p95 ms |\n|---|---|---|\n';
            for (const [stage, stats] of top) {
              body += `| ${stage} | ${stats.median_ms.toFixed(3)} | ${stats.p95_ms.toFixed(3)} |\n`;
            }
            body += '\nFlamegraphs: `flame_off.svg` (Rust off) and `flame_on.svg` (Rust on) are available in the workflow artifacts.';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

