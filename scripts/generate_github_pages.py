#!/usr/bin/env python3
"""
Generate GitHub Pages index.html for DataSON benchmark results
"""

import json
from datetime import datetime
from pathlib import Path
import glob

def generate_github_pages():
    """Generate an index.html for GitHub Pages with latest benchmark reports"""
    
    docs_dir = Path('docs/results')
    docs_dir.mkdir(parents=True, exist_ok=True)
    
    # Find latest CI reports and Phase 4 enhanced reports
    ci_reports = list(docs_dir.glob('ci_*_report.html'))
    phase4_reports = list(docs_dir.glob('phase4_comprehensive_*.html'))
    weekly_reports = list(docs_dir.glob('weekly_*_*.html'))
    
    # Sort all reports by modification time
    all_reports = ci_reports + phase4_reports + weekly_reports
    all_reports.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    
    # Group by suite type
    suite_reports = {}
    
    # Process CI reports
    for report in ci_reports[:15]:  # Last 15 CI reports
        parts = report.name.split('_')
        if len(parts) >= 4:
            suite_type = parts[-2]  # Extract suite type
            if suite_type not in suite_reports:
                suite_reports[suite_type] = []
            suite_reports[suite_type].append({
                'filename': report.name,
                'timestamp': '_'.join(parts[1:3]),  # Extract timestamp
                'type': 'ci'
            })
    
    # Process Phase 4 enhanced reports
    phase4_reports_list = []
    for report in phase4_reports[:10]:  # Last 10 Phase 4 reports
        timestamp = report.name.replace('phase4_comprehensive_', '').replace('.html', '')
        phase4_reports_list.append({
            'filename': report.name,
            'timestamp': timestamp,
            'type': 'phase4'
        })
    
    if phase4_reports_list:
        suite_reports['phase4_enhanced'] = phase4_reports_list
    
    # Process weekly reports
    weekly_reports_list = []
    for report in weekly_reports[:5]:  # Last 5 weekly reports
        weekly_reports_list.append({
            'filename': report.name,
            'timestamp': report.name.split('_')[-1].replace('.html', ''),
            'type': 'weekly'
        })
    
    if weekly_reports_list:
        suite_reports['weekly'] = weekly_reports_list
    
    # Generate index.html
    timestamp_str = datetime.now().strftime('%Y-%m-%d %H:%M UTC')
    
    html = f"""<!DOCTYPE html>
<html>
<head>
    <title>DataSON Benchmark Results</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; }}
        .header {{ text-align: center; margin-bottom: 30px; color: #333; }}
        .suite-section {{ margin: 30px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }}
        .report-list {{ list-style: none; padding: 0; }}
        .report-item {{ padding: 10px; margin: 5px 0; background: #f8f9fa; border-radius: 3px; }}
        .report-item a {{ text-decoration: none; color: #007bff; font-weight: bold; }}
        .report-item a:hover {{ text-decoration: underline; }}
        .timestamp {{ color: #666; font-size: 0.9em; }}
        .badge {{ background: #007bff; color: white; padding: 3px 8px; border-radius: 3px; font-size: 0.8em; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📊 DataSON Benchmark Results</h1>
            <p>Latest benchmark reports generated by CI</p>
            <p class="timestamp">Last updated: {timestamp_str}</p>
        </div>
"""
    
    for suite_type, reports in suite_reports.items():
        # Custom titles and descriptions for different report types
        if suite_type == 'phase4_enhanced':
            title = "🎨 Phase 4 Enhanced Reports"
            description = "Interactive reports with comprehensive tables, smart units, and visualizations"
        elif suite_type == 'weekly':
            title = "📅 Weekly Reports"
            description = "Comprehensive weekly analysis with trend data"
        else:
            title = f"📊 {suite_type.title()} Reports"
            description = "Standard benchmark reports"
            
        html += f"""
        <div class="suite-section">
            <h2><span class="badge">{title}</span></h2>
            <p style="color: #666; font-size: 0.9em; margin-bottom: 15px;">{description}</p>
            <ul class="report-list">
"""
        for report in reports[:5]:  # Show last 5 per suite
            report_type = report.get('type', 'ci')
            if report_type == 'phase4':
                icon = "🎨"
                label = "Enhanced Analysis"
            elif report_type == 'weekly':
                icon = "📅"
                label = "Weekly Report"
            else:
                icon = "📊"
                label = f"{suite_type.title()} Report"
                
            html += f"""
                <li class="report-item">
                    <a href="{report['filename']}">{icon} {label}</a>
                    <span class="timestamp">({report['timestamp']})</span>
                </li>
"""
        html += """
            </ul>
        </div>
"""
    
    html += """
        <div class="suite-section">
            <h2>🔗 Repository Links</h2>
            <ul class="report-list">
                <li class="report-item">
                    <a href="https://github.com/{github_repository}">📁 Source Repository</a>
                </li>
                <li class="report-item">
                    <a href="https://github.com/{github_repository}/actions">🔄 CI Actions</a>
                </li>
            </ul>
        </div>
    </div>
</body>
</html>
"""
    
    # Replace GitHub placeholders with environment variables
    import os
    github_repo = os.environ.get('GITHUB_REPOSITORY', 'datason/datason-benchmarks')
    html = html.replace('{github_repository}', github_repo)
    
    with open(docs_dir / 'index.html', 'w') as f:
        f.write(html)
    
    print('📄 Generated GitHub Pages index.html')

if __name__ == '__main__':
    generate_github_pages() 